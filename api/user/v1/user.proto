syntax = "proto3";

package api.user.v1;
import "errors/errors.proto";
import "google/api/annotations.proto";

option go_package = "realworld/api/user/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.v1";

enum ErrorReason {
	option (errors.default_code) = 500;

	// 用户已经存在
	USER_EXISTED = 0 [(errors.code) = 400];
	// 用户找不到
	USER_NOT_FOUND = 1 [(errors.code) = 400];
	// 入参不对
	INVAILD_PARAM = 2 [(errors.code) = 400];
	// 密码错误
	WRONG_PASSWD = 3 [(errors.code) = 400];
}

message ClaimPayload {
	int64 uid = 1;
	string name = 2;
}

service User {
	rpc CreateUser (CreateUserRequest) returns (CreateUserReply) {
		option (google.api.http) = {
			post: "/user/v1/users"
			body: "*"
		};
	};
	rpc UpdateUser (UpdateUserRequest) returns (UpdateUserReply) {
		option (google.api.http) = {
			put: "/user/v1/users/{uid}"
			body: "*"
		};
	};
	rpc DeleteUser (DeleteUserRequest) returns (DeleteUserReply) {
		option (google.api.http) = {
			delete: "/user/v1/users/{account}"
		};
	};
	rpc GetUser (GetUserRequest) returns (GetUserReply) {
		option (google.api.http) = {
			get: "/user/v1/users/{account}"
		};
	};
	rpc ListUser (ListUserRequest) returns (ListUserReply) {
		option (google.api.http) = {
			get: "/user/v1/users"
		};
	};
	rpc GetLoginInfo(LoginInfoRequest) returns (LoginInfoReply) {
		option (google.api.http) = {
			get : "/user/v1/users/{account}/login/info"
		};
	};
	rpc LoginUser (LoginUserReq) returns (LoginUserResp) {
		option (google.api.http) = {
			post: "/user/v1/users/login"
			body: "*"
		};
	};
	rpc LogoutUser (LogoutUserReq) returns (LogoutUserResp) {
		option (google.api.http) = {
			post: "/user/v1/users/{account}/logout"
			body: "*"
		};
	};
	rpc SearchUser (SearchUserReq) returns (SearchUserResp) {
		option (google.api.http) = {
			get: "/user/v1/search/users"
		};
	};
}

message SearchUserReq {
	string name_key = 1;
	int32 count = 2;
}

message SearchUserResp {
	message HL {
		string feild = 1;
		repeated string values = 2;
	}
	message UserInfo {
		UserBaseInfo info = 1;
		repeated HL hl =2;
	}
	repeated UserInfo users = 1;
	int32 total = 2;
}

message LogoutUserReq {
	string account = 1;
}

message LogoutUserResp {
}

message LoginInfoRequest {
	string account = 1;
}

message LoginInfoReply {
	//非对称加密公钥
	string public_key = 1;
	// 调试用，正式不应该返回私钥
	string private_key = 2;
}

message LoginUserReq {
	string account = 1;
	// 非对称加密之后的密码
	string passwd = 2;
}

message LoginUserResp {
	int64 uid = 1;
	string name = 2;
}


message CreateUserRequest {
	UserBaseInfo info = 1;
}

message CreateUserReply {
	UserBaseInfo info = 1;
}

message UpdateUserRequest {
	int64 uid = 1;
	optional string passwd = 2;
	optional string phone_num = 3;
	optional string name = 4;
}

message UpdateUserReply {}

message DeleteUserRequest {
	string account = 1;
	// hard: 1-删除记录；0-只是标准状态为noactive
	int32 hard = 2;
}
message DeleteUserReply {}

message GetUserRequest {
	string account = 1;
}

message GetUserReply {
	UserBaseInfo info = 1;
}

message ListUserRequest {
	int64 start_id = 1;
	int64 count = 2;
	// 0 : all status will return 
	UserStatus status = 3; 
}
message ListUserReply {
	repeated UserBaseInfo users = 1;
	int64 next_start_id = 2;
}

enum UserStatus {
	NONE = 0;
	NOT_ACTIVE = 1;
	ACTIVE = 2;
	RESIGN = 3; 
}

message UserBaseInfo {
	int64 uid = 1;
	string account = 2;
	string passwd = 3;
	string phone_num = 4;
	string name = 5;
	UserStatus status = 6; 
}